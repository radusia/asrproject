<?php

/**
 * @file
 * ASR Forms module
 */

define('ASR_FORMS_THRESHOLD_MIN', variable_get('threshold_min', 0));
define('ASR_FORMS_THRESHOLD_MAX',  variable_get('threshold_max', 100));
define('ASR_FORMS_THRESHOLD_INTERVAL',  variable_get('threshold_interval', 10));

define('ASR_FORMS_SEGMENT_MIN', variable_get('segment_length_min', 1));
define('ASR_FORMS_SEGMENT_MAX',  variable_get('segment_length_max', 10));
define('ASR_FORMS_SEGMENT_INTERVAL',  variable_get('segment_length_interval', 1));

/**
 * Implementation of hook_init().
 */
function asr_forms_init() {
	//drupal_add_js(drupal_get_path('module', 'asr_forms').'/js/asr_forms.js');
	drupal_add_css(drupal_get_path('module', 'asr_forms').'/css/asr_forms.css');
}

/**
 * Implementation of hook_perm().
 */
/*function asr_forms_permission() {
  return array(
    'create asr forms' => array(
      'title' => t('Edit ASR Forms'),
      'description' => t('View/Edit/Submit ASR Forms'),
    ),
 );
}*/

/**
 * Implementation of hook_menu().
 */
function asr_forms_menu() {
  
  $items = array();
  
  $items['admin/config/system/asr_forms'] = array(
  //	'type' => MENU_CALLBACK,
  	'title' => 'ASR Forms Settings',
  	'description' => 'Configure ASR Forms settings.',
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('asr_forms_admin_settings_form'),
  	'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  	'file' => 'asr_forms.admin.inc',
  	'weight' => 100,
  );
  
  $items['asr_forms/sequence_alignement'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'ASR Alignement',
  		'description' => 'Configure ASR Forms settings.',
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('asr_forms_sequence_alignement_form'),
  	'access callback' => 'user_access',
    'access callback' => TRUE,
  );
  
 /* $items['asr_forms/history'] = $base + array(
  	'type' => MENU_CALLBACK,
  	'page callback' => '_asr_forms_history',
  	'access callback' => TRUE,
  );*/
    
  return $items;
}

function asr_forms_sequence_alignement_form($form, &$form_state) {
	drupal_add_js(drupal_get_path('module', 'asr_forms').'/js/asr_forms.js');
	$form['asr_alignement'] = array(
			'#type' => 'fieldset',
			'#title' => t('Ancient standard repeats detection in DNA sequence'),
			'#description' => t('text here'),
	);
	
	$form['asr_alignement']['algnement_name'] = array(
			'#type' => 'textfield',
			'#title' => t('Alignement Name'),
			'#description' => t('Enter Alignement Name'),
			'#required' => TRUE,
	);
	
	$form['asr_alignement']['alignement_file'] = array(
			'#type' => 'file',
			'#title' => t('File Path'),
			'#size' => 50,
			'#description' => t('Upload DNA sequence for alignement in FASTA format'),
			'#required' => TRUE,
	);
		
	$form['asr_alignement']['alignement_organisms'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Organisms List'),
			'#description' => t('You can choose one organism from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['alignement_retrotransposons'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Retrotransposons List'),
			'#description' => t('You can choose one retrotransposon from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['alignement_retrotransposons_portion'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Retrotransposons Portion List'),
			'#multiple' => TRUE,
			'#size' => 3,
			'#description' => t('You can choose one retrotransposon portion from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['loading-small'] = array(
			'#markup' => "<img src='/".drupal_get_path('module', 'asr_forms')."/images/loading-small.gif' class='loading_small' />",
	);
	$form['asr_alignement']['alignement_segment_length'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_SEGMENT_MIN, ASR_FORMS_SEGMENT_MAX, ASR_FORMS_SEGMENT_INTERVAL),
			'#title' => t('Segment Length'),
			'#description' => t('Select slice length you want to use for your sequence alignement.'),
			'#required' => FALSE,
	);
	
	$form['asr_alignement']['alignement_threshold'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_THRESHOLD_MIN, ASR_FORMS_THRESHOLD_MAX, ASR_FORMS_THRESHOLD_INTERVAL),
			'#title' => t('Alignement Threshold'),
			'#description' => t('Select threshold value for sequence alignement.'),
			'#required' => FALSE,
	);
	
	/*$form['asr_alignement']['submit'] = array(
			'#type' => 'button',
			'#value' => t('Align sequence'),
			//'#attributes' => array('class' => 'submit_algorithm'),
	);*/

  $form['asr_alignement']['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'asr_forms_submit_driven_callback',
      'wrapper' => 'box',
      'name' => 'submit1',
    ),
    '#value' => t('Submit'),
  );
	
  $form['asr_alignement']['box'] = array(
  		'#type' => 'markup',
  		'#prefix' => '<div id="box">',
  		'#suffix' => '</div>',
  		//'#markup' => '<h1>Result Here</h1>',
  );
	return $form;
}

function asr_forms_sequence_alignement_form_validate($form, $form_state) {
	$error = "";
	if(empty($form_state['values']['algnement_name'])) {
		$error = t('Please specify name for alignement');
	}
	else if(empty($_FILES['files']['tmp_name']['alignement_file'])) {
		$error = t('Please upload file for alignement');
	}
	else if(empty($form_state['values']['alignement_organisms'])) {
		$error = t('Please select organism for alignement');
	}
	else if(empty($form_state['values']['alignement_retrotransposons'])) {
		$error = t('Please select retrotransposon for alignement');
	}
	else if(empty($form_state['values']['alignement_retrotransposons_portion'])) {
		$error = t('Please select at least one retrotransposons portion for alignement');
	}
	return $error;
}
/**
 * Select the 'box' element, change the markup in it, and return it as a
 * renderable array.
 *
 * @return renderable array (the box element)
 */
function asr_forms_submit_driven_callback($form, $form_state) {
	/*drupal_set_message(t("Error saving user account."), 'error');
			$form_state['redirect'] = '';
			return;*/
			//echo "<pre>";
			//print_r(file_get_contents($_FILES['files']['tmp_name']['alignement_file']));
			//exit;
$messages = drupal_get_messages();
$element = $form['asr_alignement']['box'];
//$element['#markup'] = '';
	$error = asr_forms_sequence_alignement_form_validate($form, $form_state);
	if(!empty($error)) {		
		$element['#markup'] = '<div class="messages error">
								<h2 class="element-invisible">Error message</h2>'.$error.'
						       </div>';
	}
	else { // submit alignement algorithms
		$result = DoASRAlign(file_get_contents($_FILES['files']['tmp_name']['alignement_file']), $form_state['values']);
		$element['#markup'] = "<pre>Clicked submit ({$form_state['values']['op']}): " . date('c'). print_r($result, 1);
		
	}
	$element['#prefix'] = '<div id="box">';
	$element['#suffix'] = '</div>';
	return $element;
}

function build_select_arr($min, $max, $interval) {
	$curr = $min;
	$select_arr = Array();
	if($min < $max) {
		while($curr <= $max) {
			$select_arr[$curr] = $curr;
			$curr = $curr + $interval;
		}
	}
	return $select_arr;
}