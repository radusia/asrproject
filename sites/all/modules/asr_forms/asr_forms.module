<?php

/**
 * @file
 * ASR Forms module
 */

define('ASR_FORMS_THRESHOLD_MIN', variable_get('threshold_min', 0));
define('ASR_FORMS_THRESHOLD_MAX',  variable_get('threshold_max', 100));
define('ASR_FORMS_THRESHOLD_INTERVAL',  variable_get('threshold_interval', 10));

define('ASR_FORMS_SEGMENT_MIN', variable_get('segment_length_min', 1));
define('ASR_FORMS_SEGMENT_MAX',  variable_get('segment_length_max', 10));
define('ASR_FORMS_SEGMENT_INTERVAL',  variable_get('segment_length_interval', 1));

/**
 * Implementation of hook_init().
 */
function asr_forms_init() {
	//drupal_add_js(drupal_get_path('module', 'asr_forms').'/js/asr_forms.js');
	drupal_add_css(drupal_get_path('module', 'asr_forms').'/css/asr_forms.css');
}

/**
 * Implementation of hook_perm().
 */
function asr_forms_permission() {
  return array(
    'edit asr forms' => array(
      'title' => t('Edit ASR Forms'),
      'description' => t('View/Edit/Submit ASR Forms'),
    ),
 );
}

/**
 * Implementation of hook_menu().
 */
function asr_forms_menu() {
  
  $items = array();
  
  $items['admin/config/system/asr_forms'] = array(
  //'type' => MENU_CALLBACK,
  	'title' => 'ASR Forms Settings',
  	'description' => 'Configure ASR Forms settings.',
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('asr_forms_admin_settings_form'),
  	'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  	'file' => 'asr_forms.admin.inc',
  	'weight' => 100,
  );
  
  $items['asr_forms/sequence_alignement'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'ASR Alignement',
  	'description' => 'ASR Alignement Forms.',
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('asr_forms_sequence_alignement_form'),
  	'access callback' => 'user_access',
  	'access arguments' => array('edit asr forms')
  );
    
  return $items;
}

function asr_forms_sequence_alignement_form($form, &$form_state) {	
	drupal_add_js(drupal_get_path('module', 'asr_forms').'/js/asr_forms.js');
	drupal_add_js('misc/collapse.js');
	$form['asr_alignement'] = array(
			'#type' => 'fieldset',
			'#title' => t('Ancient standard repeats detection in DNA sequence'),
			'#description' => t('Add information about algorithm here'),
	);
	
	$form['asr_alignement']['error'] = array(
			'#type' => 'markup',
			'#prefix' => '<div class="asr_forms_error">',
			'#suffix' => '</div>',
	);
	
	$form['asr_alignement']['algnement_name'] = array(
			'#type' => 'textfield',
			'#title' => t('Alignement Name'),
			'#description' => t('Enter Alignement Name. Give unique name according to DNA sequence which can be used in alignement history later.'),
			'#required' => TRUE,
	);
	
	$form['asr_alignement']['alignement_file'] = array(
			'#type' => 'file',
			'#title' => t('File Path'),
			'#size' => 60,
			'#description' => t('Upload DNA sequence for alignement in <a href="" target="_blank">correct format</a>.'),
			'#required' => TRUE,
	);
		
	$form['asr_alignement']['alignement_organisms'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Organisms List'),
			'#description' => t('Choose one organism from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['alignement_retrotransposons'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Retrotransposons List'),
			'#description' => t('Choose one retrotransposon from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['alignement_retrotransposons_portion'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Retrotransposons Portion List'),
			'#multiple' => TRUE,
			'#size' => 3,
			'#description' => t('Choose at least one retrotransposon portion from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['loading-small'] = array(
			'#markup' => "<div class='loading_small'><div class='ajax-progress'><div class='throbber'></div>".t('Please wait...')."</div></div>",
	);
	$form['asr_alignement']['alignement_segment_length'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_SEGMENT_MIN, ASR_FORMS_SEGMENT_MAX, ASR_FORMS_SEGMENT_INTERVAL),
			'#title' => t('Segment Length'),
			'#description' => t('Select slice length you want to use for your sequence alignement.'),
			'#required' => FALSE,
	);
	
	$form['asr_alignement']['alignement_threshold'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_THRESHOLD_MIN, ASR_FORMS_THRESHOLD_MAX, ASR_FORMS_THRESHOLD_INTERVAL),
			'#title' => t('Alignement Threshold'),
			'#description' => t('Select threshold value for sequence alignement.'),
			'#required' => FALSE,
	);
	
	/*$form['asr_alignement']['submit'] = array(
			'#type' => 'button',
			'#value' => t('Align sequence'),
			//'#attributes' => array('class' => 'submit_algorithm'),
	);*/

  $form['asr_alignement']['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'asr_forms_submit_driven_callback',
      'wrapper' => 'box',
      'name' => 'submit1',
    ),
    '#value' => t('Submit'),
  );
	
  $form['asr_alignement']['box'] = array(
  		'#type' => 'markup',
  		'#prefix' => '<div id="box">',
  		'#suffix' => '</div>',
  		//'#markup' => '<h1>Result Here</h1>',
  );
	return $form;
}

function asr_forms_sequence_alignement_form_validate($form, $form_state) {
	$error = "";
	if(empty($form_state['values']['algnement_name'])) {
		$error = array('error' => t('Please specify name for alignement'), 'field' => 'algnement-name');
	}
	else if(empty($_FILES['files']['tmp_name']['alignement_file'])) {
		$error = array('error' => t('Please upload file for alignement'), 'field' => 'alignement-file');
	}
	else if(empty($form_state['values']['alignement_organisms'])) {
		$error = array('error' => t('Please select organism for alignement'), 'field' => 'alignement-organisms');
	}
	else if(empty($form_state['values']['alignement_retrotransposons'])) {
		$error = array('error' => t('Please select retrotransposon for alignement'), 'field' => 'alignement-retrotransposons');
	}
	else if(empty($form_state['values']['alignement_retrotransposons_portion'])) {
		$error = array('error' => t('Please select at least one retrotransposons portion for alignement'), 'field' => 'alignement-retrotransposons-portion');
	}
	return $error;
}
/**
 * Select the 'box' element, change the markup in it, and return it as a
 * renderable array.
 *
 * @return renderable array (the box element)
 */
function asr_forms_submit_driven_callback($form, $form_state) {
	/*drupal_set_message(t("Error saving user account."), 'error');
			$form_state['redirect'] = '';
			return;*/
			//echo "<pre>";
			//print(implode(",", $form_state['values']['alignement_retrotransposons_portion']));
			//exit;
$messages = drupal_get_messages();
$element = $form['asr_alignement']['box'];
//$element['#markup'] = '';
	$error = asr_forms_sequence_alignement_form_validate($form, $form_state);
	if(!empty($error)) {		
		$element['#markup'] = asr_forms_error_script($error['error'], $error['field']);
	}
	else { // submit alignement algorithms
		$result = DoASRAlign(file_get_contents($_FILES['files']['tmp_name']['alignement_file']), $form_state['values']);
		if(isset($result->Error) && $result->Error == 'NoError') {
			//$element['#markup'] = "<pre>Clicked submit ({$form_state['values']['op']}): " . date('c'). print_r($result, 1);
			$element['#markup'] = asr_forms_error_script().asr_forms_alignement_result($result);
		}
		else {
			$element['#markup'] = asr_forms_error_script('General error. Ref #: '.(isset($result->RefNumber)?$result->RefNumber:'NA'));		
		}		
	}
	$element['#prefix'] = '<div id="box">';
	$element['#suffix'] = '</div>';
	return $element;
}

function asr_forms_error_script($error = '', $field = '') {
	if(!empty($error)) {
		$script = '<script type="text/javascript">
				jQuery(\'input\').removeClass(\'error\'); 
				jQuery(\'select\').removeClass(\'error\'); 
				'.(!empty($field)? 'jQuery(\'#edit-'.$field.'\').addClass(\'error\');':'').'
				jQuery(\'.asr_forms_error\').html(\'<div class="messages error">'.$error.'</div>\'); 
				</script>';
	}
	else {
		$script = '<script type="text/javascript">
				jQuery(\'input\').removeClass(\'error\');
				jQuery(\'select\').removeClass(\'error\');
				jQuery(\'.asr_forms_error\').html(\'\');
				</script>';
	}
	return $script;
}

function asr_forms_alignement_result($result) {
	$out = ''; 
	$collapsed = true;
	if(isset($result->ASRAlignResult->RetrotransposonsPortionAlignResult)) {
		$list = $result->ASRAlignResult->RetrotransposonsPortionAlignResult;
		$list = is_array($list)?$list:array($list);
		foreach ($list as $value) {
//			$out .= '<pre>'.print_r($value,1);
// 			$value->ExactMatchAlignResult->NumWords;
// 			$value->ExactMatchAlignResult->SuccessMatchPercentage;
// 			$value->AlignWordStatus; //AlignOk
// 			$value->LoaclAlignmentResult->AlignedASRSequence;
// 			$value->LoaclAlignmentResult->AlignedGeneSequence;
// 			$value->LoaclAlignmentResult->GeneSequenceLength;
// 			$value->LoaclAlignmentResult->GeneSequenceStartOffset;
// 			$value->LoaclAlignmentResult->Score;
// 			$value->RetrotransposonsPortion->Name;
// 			$value->RetrotransposonsPortion->Repeat;
			//echo "<pre>";
			//print_r($value,1);
			//return;
 			$out .= asr_forms_wrap_result($value, $collapsed);
 			$collapsed = false;
		}
	}
	return $out;
}

function asr_forms_wrap_result($value, $collapsed = false) {	
	$LoaclAlignmentResult_table = $ExactMatchAlignResult_table = '';
	
	$header = $header1 = array();
	$rows = $rows1 = array();

	$header = array(
			array('data' => t('Number of Words')),
			array('data' => t('Success Match Percentage')),);
	$rows [] = array(  
		array('data' => $value->ExactMatchAlignResult->NumWords),   
		array('data' => ($value->ExactMatchAlignResult->SuccessMatchPercentage*100).'%'),
	);
	$ExactMatchAlignResult_table = theme('table', array('header' => $header, 'rows' => $rows));
	
	
	if(!empty($value->LoaclAlignmentResult)) {
		$header1 = array(
				array('data' => t('Loacl Alignment Result'), 'colspan' => 2)
		);
		
		$rows1 [] = array(
				array('data' => t('Gene Sequence Length')),
				array('data' => $value->LoaclAlignmentResult->GeneSequenceLength),
		);
		$rows1 [] = array(
				array('data' => t('GeneSequenceStartOffset')),
				array('data' => $value->LoaclAlignmentResult->GeneSequenceStartOffset),
		);
		
		$rows1 [] = array(
			array('data' => t('Aligned ASR Sequence')),
			array('data' => $value->LoaclAlignmentResult->AlignedASRSequence),
		);
		
		$rows1 [] = array(
				array('data' => t('Aligned Gene Sequence')),
				array('data' => $value->LoaclAlignmentResult->AlignedGeneSequence),
		);
		$LoaclAlignmentResult_table = theme('table', array('header' => $header1, 'rows' => $rows1));
		
	}
	
	$title_class = ($value->AlignWordStatus == 'AlignOk')?'txt_green':'txt_red'; 
	
	$current_fieldset = array(
			'#title' => '<span class="'.$title_class.'">'.$value->RetrotransposonsPortion->Name.'</span>',
			'#collapsible' => true,
			'#collapsed' => $collapsed,
			'#attributes'  => array( 'class' => (!$collapsed ? array('collapsible', 'collapsed'):array('collapsible')) ),
			'#children' => 'Repeat: '.$value->RetrotransposonsPortion->Repeat,
			'#value' => $ExactMatchAlignResult_table. $LoaclAlignmentResult_table);
	return theme('fieldset', array('element' => $current_fieldset));
}

function build_select_arr($min, $max, $interval) {
	$curr = $min;
	$select_arr = Array();
	if($min < $max) {
		while($curr <= $max) {
			$select_arr[$curr] = $curr;
			$curr = $curr + $interval;
		}
	}
	return $select_arr;
}