<?php

/**
 * @file
 * ASR API module
 */
define('DEBUG_MODE_WATCHDOG', 1);

define('DEBUG_MAIL', 'radusia@gmail.com');
define('DEBUG_MODE_EMAIL', 0);

//define('ASR_API_WSDL_URL', 'http://assr.uhurucloud.com/ASRServices.svc?wsdl');
define('ASR_API_WSDL_URL', variable_get('wsdl_url', 'http://94.159.184.226/ASRService.Application/ASRServices.svc?wsdl'));
/**
 * Implementation of hook_menu().
 */
function asr_api_menu() {
  $items = array();
  
  $items['admin/config/system/asr_api'] = array(
  //'type' => MENU_CALLBACK,
  	'title' => 'API Settings',
  	'description' => 'Configure ASR API settings.',
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('asr_api_admin_settings_form'),
  	'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  	'file' => 'asr_api.admin.inc',
  	'weight' => 100,
  );
  
  $items['asr_api/GetOrganismList'] = array(
    	'type' => MENU_CALLBACK,
  		'page callback' => 'GetOrganismList',
  		'page arguments' => array(),
    	'access callback' => 'user_access',
  		'access arguments' => array('edit asr forms')
  );
  $items['asr_api/GetRetrotransposonsList'] = array(
  		'type' => MENU_CALLBACK,
  		'page callback' => 'GetRetrotransposonsList',
  		'page arguments' => array(),
  		'access callback' => 'user_access',
  	    'access arguments' => array('edit asr forms')
  );
  $items['asr_api/GetRetrotransposonsPortionList'] = array(
  		'type' => MENU_CALLBACK,
  		'page callback' => 'GetRetrotransposonsPortionList',
  		'page arguments' => array(),
  		'access callback' => 'user_access',
  	    'access arguments' => array('edit asr forms')
  );
    
  return $items;
}

/**
 * Send request to WSDL API by using  SoapClient and return parsed respnse
 *
 * @param string $method
 * @param array $params
 */
function asr_api_service_call($method, $params=array(), $cache=false){

	$options = array();
	$options['exceptions']  = false;
	$options['encoding']  = 'utf-8';
	$options['soap_version'] = SOAP_1_1;
	$options['cache_wsdl'] = WSDL_CACHE_NONE;

	$wsdl = ASR_API_WSDL_URL;
	
	//$wsdl=$WD.($cache ? '' : '&k='.uniqid() );

	try {
		$client = new SoapClient($wsdl, $options);		
	}catch (Exception $e) {
		throw $e->getMessage();
	}

	$params = array($method => $params);

	try {
		$response=$client->__soapCall($method, $params);
		//$response = var_dump($client->__getLastRequest());
	}catch (Exception $e){
		watchdog('asr_api', 'Exception throwen in %file, line: %line. Message: %message. Trace: %trace. WebRefId : %webRefId.', array(
		'%file' => $e->getFile(),
		'%line' => $e->getLine(),
		'%message' => $e->getMessage(),
		'%trace' => $e->getTrace(),
		'%webRefId' => rand(10000000, 99999999),
		)
		);
		//echo("<pre>"); //to format it legibly on your screen
		//var_dump($client->__getLastRequestHeaders()); //the headers of your last request
		//$response = var_dump($client->__getLastRequest()); //your last request
		$response = array('ErrorCode' => 201); // ErrorCode 201 is web general error (error.js)
		_output_json_response($response);
		exit();
	}

	if(DEBUG_MODE_EMAIL==1 && DEBUG_MAIL!='')
		mail(DEBUG_MAIL, $method, 'Request: '.print_r($params,1).' Response: '.print_r($response,1));
	if(DEBUG_MODE_WATCHDOG==1)
		watchdog('DEBUG', '<pre>Request: '.print_r($params,1).' <br />Response: '.print_r($response,1));
	return $response;
}

/**
 * Resturn json response to client
 *
 * @param array $out
 */
function _output_json_response($out, $callbackError='') {

	header('Content-type:application/x-javascript');
	if(isset($_GET['callback'])){
		if($callbackError != '' ){
			$callback=$callbackError;
		}else{
			$callback = (isset($_GET['callback']) && preg_match('/^[0-9a-zA-Z\-_]{1,50}$/', $_GET['callback'])) ? $_GET['callback'] : '';
		}
		$str= $callback . '(' . drupal_to_js($out) . ');';
	}else{
		$str= drupal_json_output($out);
	}


	if(isset($_GET["timetest"])){
		$total_time = round((getTime() - TIME_START), 4);
		echo 'Page generated in '.$total_time.' seconds.';
	}else{
		echo $str;
	}

	return;
}

/**
 * Get Organism List - invoke method GetOrganismList
 * @param  
 *
 * @return $out - json response
 */
function GetOrganismList($json = true){

	$var_key = 'GetOrganismList';
	
	if(variable_get($var_key, null) != null && $json) {
		_output_json_response(variable_get($var_key, null));
		return;
	}
	
	$params = array();
	
	try {
		$response = asr_api_service_call('GetOrganismList', $params);
	}catch (Exception $e){
		return $e;
	}
	//echo "<pre>";
	//print_r($response);
	//exit;
	$out = $response->GetOrganismListResult;
	if(isset($out->OrganismCollection->OrganismSkeleton))
	{
		$list = $out->OrganismCollection->OrganismSkeleton;
		$out->list = is_array($list)?$list:array($list);
		unset($out->OrganismCollection);
	}
	unset($response);
	variable_set($var_key, $out);
	if($json)
		_output_json_response($out);
	else return $out;
}

/**
* Get Retrotransposons List - invoke method GetRetrotransposonsList
* @param
*
* @return $out - json response
*/
function GetRetrotransposonsList($json = true){
	$OrganismId = strip_tags(isset($_POST["OrganismId"]) ? $_POST["OrganismId"] : 1);

	$var_key = 'GetRetrotransposonsList_oid'.$OrganismId;
	
	if(variable_get($var_key, null) != null && $json) {
		_output_json_response(variable_get($var_key, null));
		return;
	}
	
	$params = array('input' => array('OrganismId' => $OrganismId));

	try {
		$response = asr_api_service_call('GetRetrotransposonsList', $params);
	}catch (Exception $e){
		return $e;
	}
	//echo "<pre>";
	//print_r($response);
	//exit;
	$out = $response->GetRetrotransposonsListResult;

	if(isset($out->RetrotransposonsSkeletonCollection->RetrotransposonsSkeleton))
	{
		$list = $out->RetrotransposonsSkeletonCollection->RetrotransposonsSkeleton;
		$out->list = is_array($list)?$list:array($list);
		unset($out->RetrotransposonsSkeletonCollection);
	}
	unset($response);
	variable_set($var_key, $out);
	if($json)
		_output_json_response($out);
	else return $out;
}

/**
 * Get Retrotransposons Portion List - invoke method GetRetrotransposonsPortionList
 * @param
 *
 * @return $out - json response
 */
function GetRetrotransposonsPortionList($json = true){
	$OrganismId = strip_tags(isset($_POST["OrganismId"]) ? $_POST["OrganismId"] : 1);
	$RetrotransposonsId = strip_tags(isset($_POST["RetrotransposonsId"]) ? $_POST["RetrotransposonsId"] : 1);
	
	$var_key = 'GetRetrotransposonsPortionList_oid'.$OrganismId.'_rid'.$RetrotransposonsId;
	
	if(variable_get($var_key, null) != null && $json) {
		_output_json_response(variable_get($var_key, null));
		return;
	}
	
	$params = array('input' => array('OrganismId' => $OrganismId, 'RetrotransposonsId' => $RetrotransposonsId));

	try {
		$response = asr_api_service_call('GetRetrotransposonsPortionList', $params);
	}catch (Exception $e){
		return $e;
	}
	//echo "<pre>";
	//print_r($response);
	//exit;
	$out = $response->GetRetrotransposonsPortionListResult;
	if(isset($out->RetrotransposonsPortionSkeletonCollection->RetrotransposonsPortionSkeleton))
	{
		$list = $out->RetrotransposonsPortionSkeletonCollection->RetrotransposonsPortionSkeleton;
		$out->list = is_array($list)?$list:array($list);
		unset($out->RetrotransposonsPortionSkeletonCollection);
	}
	unset($response);
	variable_set($var_key, $out);
	if($json)
		_output_json_response($out);
	else return $out;
}

/**
 * ASR Lignement - invoke method DoASRAlignAlternate
 * @param string - $alignement_string
 * @param array  - $form_values - input form values
 * 
 * @return object $out - alignement result
 */
function DoASRAlign($alignement_string, $form_values, $chunk_offset, $alignement_uid) {
	$OrganismId = $form_values['alignement_organisms'];
	$RetrotransposonsId = $form_values['alignement_retrotransposons'];
 	$RetrotransposonsPortionList = implode(",", $form_values['alignement_retrotransposons_portion']);
	$NewSequence = $alignement_string;
	$WordLength = $form_values['alignement_segment_length'];
	$WordMatchPercentage = $form_values['alignement_threshold']/100;
	$GapExtensionCost = $form_values['alignement_extension_cost'];
	$GapOpenCost = $form_values['alignement_open_cost'];
	$MinLocalAlignmentScoreMatrix = $form_values['alignement_min_local_cost'];
	$CheckResultWithShuffeledSequence = !empty($form_values['alignement_options']['alignement_shuffeled_sequence']) ? 'true' : 'false';
	$RemoveNonOverlapRepeatMatch = !empty($form_values['alignement_options']['alignement_non_overlap']) ? 'true' : 'false';
	$ReturnOnlyLocalAlignOk = !empty($form_values['alignement_options']['alignement_align_ok']) ? 'true' : 'false';
	$algnement_name = $form_values['algnement_name'];
	
	$params =array('input' => array('NewSequence' => $NewSequence,
			'ChunkOffset' => $chunk_offset,
			'BatchId' => $alignement_uid,
			'AlignmentName' => $algnement_name,
			'OrganismId' => $OrganismId,
			'RetrotransposonsId' => $RetrotransposonsId,
			'OrganismRetrotransposonsDelimitedList' => $RetrotransposonsPortionList,
			'LocalAlignmentSetting' => array('CheckResultWithShuffeledSequence' => $CheckResultWithShuffeledSequence,
											'GapExtensionCost' => $GapExtensionCost, 
											'GapOpenCost' => $GapOpenCost,
											'MinLocalAlignmentScoreMatrix' => $MinLocalAlignmentScoreMatrix),
			'ExactMatchSetting' => array('WordLength' => $WordLength,
									'WordMatchPercentage' => $WordMatchPercentage),
			'RemoveNonOverlapRepeatMatch' => $RemoveNonOverlapRepeatMatch,
			'ReturnOnlyLocalAlignOk' => $ReturnOnlyLocalAlignOk));

	try {
		$response = asr_api_service_call('DoASRAlignAlternate', $params);
	}catch (Exception $e){
		return $e;
	}
	//echo "<pre>";
	//print_r( $form_values['alignement_options']);
	//print_r($response);
	//exit;
	
	//In case module asr_archive is switched on, save $out in asr archive for current userid
	$out = $response->DoASRAlignAlternateResult;
	global $user;
	if(module_exists("asr_archive")) {
	    $out_res = base64_encode(gzcompress(serialize($out)));
	    $user_id = $user->uid;	    
	    $sql = 'INSERT INTO asr_archive (alignement, userid, alignement_uid, chunk_offset, result) VALUES(\''.$algnement_name.'\','.$user_id.',\''.$alignement_uid.'\', '.$chunk_offset.', \''.$out_res.'\')';
	    db_query($sql);
	}
	unset($response);
	return $out;
	//_output_json_response($out);
}