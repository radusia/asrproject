<?php

/**
 * @file
 * ASR Forms module
 */
/* $string = 'gggggggggggggggggggggggggggggggggggggggggtttttttttttttttttttttttttttttttttttttttttccccccccccccccccccccccccccccccccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaattttttttttttttttttttttttttttttttttssssssssssssssssssssssstttttttttttttttttggggggggggggggggg';
$str_arr = chunk_string_to_array($string, 20);
echo "<pre>";
print_r($str_arr); */

define('ASR_FORMS_THRESHOLD_MIN', variable_get('threshold_min', 0));
define('ASR_FORMS_THRESHOLD_MAX',  variable_get('threshold_max', 100));
define('ASR_FORMS_THRESHOLD_INTERVAL',  variable_get('threshold_interval', 10));

define('ASR_FORMS_SEGMENT_MIN', variable_get('segment_length_min', 1));
define('ASR_FORMS_SEGMENT_MAX',  variable_get('segment_length_max', 10));
define('ASR_FORMS_SEGMENT_INTERVAL',  variable_get('segment_length_interval', 1));

define('ASR_FORMS_COST_GAP_MIN', variable_get('segment_cost_gap_min', -5));
define('ASR_FORMS_COST_GAP_MAX',  variable_get('segment_cost_gap_max', 0));

define('ASR_FORMS_CHUNK_LENGTH',  variable_get('sequence_chunk_length', 5000));
/**
 * Implementation of hook_init().
 */
function asr_forms_init() {
	//drupal_add_js(drupal_get_path('module', 'asr_forms').'/js/asr_forms.js');
	drupal_add_css(drupal_get_path('module', 'asr_forms').'/css/asr_forms.css');
}

/**
 * Implementation of hook_perm().
 */
function asr_forms_permission() {
  return array(
    'edit asr forms' => array(
      'title' => t('Edit ASR Forms'),
      'description' => t('View/Edit/Submit ASR Forms'),
    ),
 );
}

/**
 * Implementation of hook_menu().
 */
function asr_forms_menu() {
  
  $items = array();
  
  $items['admin/config/system/asr_forms'] = array(
  //'type' => MENU_CALLBACK,
  	'title' => 'ASR Forms Settings',
  	'description' => 'Configure ASR Forms settings.',
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('asr_forms_admin_settings_form'),
  	'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  	'file' => 'asr_forms.admin.inc',
  	'weight' => 100,
  );
  
  $items['asr_forms/sequence_alignement'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'ASR Alignement',
  	'description' => 'ASR Alignement Forms.',
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('asr_forms_sequence_alignement_form'),
  	'access callback' => 'user_access',
  	'access arguments' => array('edit asr forms')
  );

  $items['asr_forms/sequence_alignement_async'] = array(
  		'type' => MENU_CALLBACK,
  		'title' => 'ASR Alignement',
  		'description' => 'ASR Alignement Forms.',
  		'page callback' => 'drupal_get_form',
  		'page arguments' => array('asr_forms_sequence_alignement_form_async'),
  		'access callback' => 'user_access',
  		'access arguments' => array('edit asr forms')
  );
  
  return $items;
}

/**
 * Sequence alignement form
 * Implementation of hook_form().
 */
function asr_forms_sequence_alignement_form($form, &$form_state) {	
	drupal_add_js('misc/jquery.tablesorter.js');
	drupal_add_js(drupal_get_path('module', 'asr_forms').'/js/asr_forms.js');
	drupal_add_js('misc/collapse.js');
	$form['asr_alignement'] = array(
			'#type' => 'fieldset',
			'#title' => t('Ancient standard repeats detection in DNA sequence'),
			'#description' => t('Add information about algorithm here'),
	);
	
	$form['asr_alignement']['error'] = array(
			'#type' => 'markup',
			'#prefix' => '<div class="asr_forms_error">',
			'#suffix' => '</div>',
	);
	
	$form['asr_alignement']['algnement_name'] = array(
			'#type' => 'textfield',
			'#title' => t('Alignement Name'),
			'#description' => t('Enter Alignement Name. Give unique name according to DNA sequence which can be used in alignement history later.'),
			'#required' => TRUE,
	);
	
	$form['asr_alignement']['alignement_file'] = array(
			'#type' => 'file',
			'#title' => t('File Path'),
			'#size' => 60,
			'#description' => t('Upload DNA sequence for alignement in <a href="" target="_blank">correct format</a>.'),
			'#required' => TRUE,
	);
		
	$form['asr_alignement']['alignement_organisms'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Organisms List'),
			'#description' => t('Choose one organism from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['alignement_retrotransposons'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Retrotransposons List'),
			'#description' => t('Choose one retrotransposon from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['alignement_retrotransposons_portion'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Retrotransposons Portion List'),
			'#multiple' => TRUE,
			'#size' => 3,
			'#description' => t('Choose at least one retrotransposon portion from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['loading-small'] = array(
			'#markup' => "<div class='loading_small'><div class='ajax-progress'><div class='throbber'></div>".t('Please wait...')."</div></div>",
	);
	$form['asr_alignement']['alignement_segment_length'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_SEGMENT_MIN, ASR_FORMS_SEGMENT_MAX, ASR_FORMS_SEGMENT_INTERVAL),
			'#title' => t('Segment Length'),
			'#description' => t('Select slice length you want to use for your sequence alignement.'),
			'#required' => FALSE,
	);
	
	$form['asr_alignement']['alignement_threshold'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_THRESHOLD_MIN, ASR_FORMS_THRESHOLD_MAX, ASR_FORMS_THRESHOLD_INTERVAL),
			'#title' => t('Alignement Threshold'),
			'#description' => t('Select threshold value for sequence alignement (the value is in %).'),
			'#required' => FALSE,
			'#default_value' => 50,
	);
	
	$form['asr_alignement']['alignement_extension_cost'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_COST_GAP_MIN, ASR_FORMS_COST_GAP_MAX, 1),
			'#title' => t('Gap Extension Cost'),
			'#description' => t('Select gap extension cost.'),
			'#required' => FALSE,
			'#default_value' => -1,
	);
	
	$form['asr_alignement']['alignement_open_cost'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_COST_GAP_MIN, ASR_FORMS_COST_GAP_MAX, 1),
			'#title' => t('Gap Open Cost '),
			'#description' => t('Select gap open cost.'),
			'#required' => FALSE,
			'#default_value' => -1,
	);
	
	$form['asr_alignement']['alignement_min_local_cost'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_COST_GAP_MIN, ASR_FORMS_COST_GAP_MAX, 1),
			'#title' => t('Min Local Alignment Score Matrix '),
			'#description' => t('Select minimum local alignements cost.'),
			'#required' => FALSE,
			'#default_value' => 0,
	);
	
	$form['asr_alignement']['alignement_options'] = array(
			'#type' => 'checkboxes',
			'#options' => array('alignement_non_overlap' => t('Remove Non Overlap Repeat Match'), 
							    'alignement_align_ok' => t('Return Only Local Align Ok'),
							    'alignement_shuffeled_sequence' => t('Check Result With Shuffeled Sequence')),
			'#title' => t('Alignemet Options'),
			//'#description' => t('Select threshold value for sequence alignement (the value is in %).'),
			'#required' => FALSE,
	);
	
  $form['asr_alignement']['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'asr_forms_submit_driven_callback',
      'wrapper' => 'box',
      'name' => 'submit1',
    ),
    '#value' => t('Submit'),
  );
	
  $form['asr_alignement']['box'] = array(
  		'#type' => 'markup',
  		'#prefix' => '<div id="box">',
  		'#suffix' => '</div>',
  		//'#markup' => '<h1>Result Here</h1>',
  );
	return $form;
}

function asr_forms_sequence_alignement_form_async($form, &$form_state) {
	drupal_add_js('misc/jquery.tablesorter.js');
	drupal_add_js(drupal_get_path('module', 'asr_forms').'/js/asr_forms.js');
	drupal_add_js('misc/collapse.js');
	$form['asr_alignement'] = array(
			'#type' => 'fieldset',
			'#title' => t('Ancient standard repeats detection in DNA sequence'),
			'#description' => t('Add information about algorithm here'),
	);

	$form['asr_alignement']['error'] = array(
			'#type' => 'markup',
			'#prefix' => '<div class="asr_forms_error">',
			'#suffix' => '</div>',
	);

	$form['asr_alignement']['algnement_name'] = array(
			'#type' => 'textfield',
			'#title' => t('Alignement Name'),
			'#description' => t('Enter Alignement Name. Give unique name according to DNA sequence which can be used in alignement history later.'),
			'#required' => TRUE,
	);

	$form['asr_alignement']['alignement_file'] = array(
			'#type' => 'file',
			'#title' => t('File Path'),
			'#size' => 60,
			'#description' => t('Upload DNA sequence for alignement in <a href="" target="_blank">correct format</a>.'),
			'#required' => TRUE,
	);

	$form['asr_alignement']['alignement_organisms'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Organisms List'),
			'#description' => t('Choose one organism from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['alignement_retrotransposons'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Retrotransposons List'),
			'#description' => t('Choose one retrotransposon from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['alignement_retrotransposons_portion'] = array(
			'#type' => 'select',
			'#options' => array(),
			'#title' => t('Retrotransposons Portion List'),
			'#multiple' => TRUE,
			'#size' => 3,
			'#description' => t('Choose at least one retrotransposon portion from list.'),
			'#required' => TRUE,
	);
	$form['asr_alignement']['loading-small'] = array(
			'#markup' => "<div class='loading_small'><div class='ajax-progress'><div class='throbber'></div>".t('Please wait...')."</div></div>",
	);
	$form['asr_alignement']['alignement_segment_length'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_SEGMENT_MIN, ASR_FORMS_SEGMENT_MAX, ASR_FORMS_SEGMENT_INTERVAL),
			'#title' => t('Segment Length'),
			'#description' => t('Select slice length you want to use for your sequence alignement.'),
			'#required' => FALSE,
	);

	$form['asr_alignement']['alignement_threshold'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_THRESHOLD_MIN, ASR_FORMS_THRESHOLD_MAX, ASR_FORMS_THRESHOLD_INTERVAL),
			'#title' => t('Alignement Threshold'),
			'#description' => t('Select threshold value for sequence alignement (the value is in %).'),
			'#required' => FALSE,
			'#default_value' => 50,
	);

	$form['asr_alignement']['alignement_extension_cost'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_COST_GAP_MIN, ASR_FORMS_COST_GAP_MAX, 1),
			'#title' => t('Gap Extension Cost'),
			'#description' => t('Select gap extension cost.'),
			'#required' => FALSE,
			'#default_value' => -1,
	);

	$form['asr_alignement']['alignement_open_cost'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_COST_GAP_MIN, ASR_FORMS_COST_GAP_MAX, 1),
			'#title' => t('Gap Open Cost '),
			'#description' => t('Select gap open cost.'),
			'#required' => FALSE,
			'#default_value' => -1,
	);

	$form['asr_alignement']['alignement_min_local_cost'] = array(
			'#type' => 'select',
			'#options' => build_select_arr(ASR_FORMS_COST_GAP_MIN, ASR_FORMS_COST_GAP_MAX, 1),
			'#title' => t('Min Local Alignment Score Matrix '),
			'#description' => t('Select minimum local alignements cost.'),
			'#required' => FALSE,
			'#default_value' => 0,
	);

	$form['asr_alignement']['alignement_options'] = array(
			'#type' => 'checkboxes',
			'#options' => array('alignement_non_overlap' => t('Remove Non Overlap Repeat Match'),
					'alignement_align_ok' => t('Return Only Local Align Ok'),
					'alignement_shuffeled_sequence' => t('Check Result With Shuffeled Sequence')),
			'#title' => t('Alignemet Options'),
			//'#description' => t('Select threshold value for sequence alignement (the value is in %).'),
			'#required' => FALSE,
	);

	$form['asr_alignement']['submit'] = array(
			'#type' => 'submit',
			'#attributes' => array('class' => 'alignement_submit'),
			'#value' => t('Submit'),
	);

	$form['asr_alignement']['box'] = array(
			'#type' => 'markup',
			'#prefix' => '<div id="box">',
			'#suffix' => '</div>',
			//'#markup' => '<h1>Result Here</h1>',
	);
	return $form;
}

/**
 * Implementation of hook_form_validate().
 */
function asr_forms_sequence_alignement_form_validate($form, $form_state) {
	$error = "";
	if(empty($form_state['values']['algnement_name'])) {
		$error = array('error' => t('Please specify name for alignment'), 'field' => 'algnement-name');
	}
	else if(empty($_FILES['files']['tmp_name']['alignement_file'])) {
		$error = array('error' => t('Please upload file for alignment'), 'field' => 'alignement-file');
	}
	else if (preg_match('/[^actg]+/', file_get_contents($_FILES['files']['tmp_name']['alignement_file']), $matches)) {
		$error = array('error' => t('Illegal characters in file for alignment.'), 'field' => 'alignement-file');
	}		 
	else if(empty($form_state['values']['alignement_organisms'])) {
		$error = array('error' => t('Please select organism for alignement'), 'field' => 'alignement-organisms');
	}
	else if(empty($form_state['values']['alignement_retrotransposons'])) {
		$error = array('error' => t('Please select retrotransposon for alignment'), 'field' => 'alignement-retrotransposons');
	}
	else if(empty($form_state['values']['alignement_retrotransposons_portion'])) {
		$error = array('error' => t('Please select at least one retrotransposons portion for alignment'), 'field' => 'alignement-retrotransposons-portion');
	}
	return $error;
}

/**
 * AJAX callback function for alignement form
 * Select the 'box' element, change the markup in it, and return it as a
 * renderable array.
 *
 * @return renderable array (the box element)
 */
function asr_forms_submit_driven_callback($form, $form_state) {
	$messages = drupal_get_messages();
	$element = $form['asr_alignement']['box'];

	$error = asr_forms_sequence_alignement_form_validate($form, $form_state);
	if(!empty($error)) {		
		$element['#markup'] = asr_forms_error_script($error['error'], $error['field']);
	}
	else { // submit alignement algorithms
		$string = file_get_contents($_FILES['files']['tmp_name']['alignement_file']);
		$string_chunks_arr = chunk_string_to_array($string, ASR_FORMS_CHUNK_LENGTH);
		$alignement_uid =  generate_uuid();
		$out_result = $out_error = '';
		$result_arr = array();
		foreach($string_chunks_arr as $key => $value) {
			if(!empty($value)) {
				$chunk_offset = ASR_FORMS_CHUNK_LENGTH*$key;
				$result = DoASRAlign($value, $form_state['values'], $chunk_offset, $alignement_uid);
				if(isset($result->Error) && $result->Error == 'NoError') {
					$result_arr[] = $result;
					//$result_arr[] = asr_forms_alignement_result($result);
					//$out_result .= asr_forms_alignement_result($result);
				}
				else {
					$out_error .= asr_forms_error_script('General error. Ref #: '.(isset($result->RefNumber)?$result->RefNumber:'NA'));
				}
			}
		}
		
		$out_result = asr_forms_alignement_result($result_arr);
		
		if(empty($out_error))
			$element['#markup'] = asr_forms_error_script().$out_result;
		else $element['#markup'] = $out_error.$out_result;
		
		/*$result = DoASRAlign(file_get_contents($_FILES['files']['tmp_name']['alignement_file']), $form_state['values']);
		if(isset($result->Error) && $result->Error == 'NoError') {
			//$element['#markup'] = "<pre>Clicked submit ({$form_state['values']['op']}): " . date('c'). print_r($result, 1);
			$element['#markup'] = asr_forms_error_script().asr_forms_alignement_result($result);
		}
		else {
			$element['#markup'] = asr_forms_error_script('General error. Ref #: '.(isset($result->RefNumber)?$result->RefNumber:'NA'));		
		}*/		
	}
	$element['#prefix'] = '<div id="box">';
	$element['#suffix'] = '</div>';
	return $element;
}

function chunk_string_to_array($string, $chunk_len = ASR_FORMS_CHUNK_LENGTH, $end = "\r\n") {
	$alignement_file_chunks = chunk_split($string, $chunk_len, $end);	
	$alignement_file_chunks_arr = explode($end, $alignement_file_chunks);
	//echo "<pre>";
	//print_r($alignement_file_chunks_arr);
	return $alignement_file_chunks_arr;
}
	
/**
 * Display/hide of error in alignement form
 * @param  string    $error - in case of error, otherwise empty to hide previous errors
 * @param  string    $field - in case of error in some field
 *
 * @return string    $script
 */
function asr_forms_error_script($error = '', $field = '') {
	if(!empty($error)) {
		$script = '<script type="text/javascript">
				jQuery(\'input\').removeClass(\'error\'); 
				jQuery(\'select\').removeClass(\'error\'); 
				'.(!empty($field)? 'jQuery(\'#edit-'.$field.'\').addClass(\'error\');':'').'
				jQuery(\'.asr_forms_error\').html(\'<div class="messages error">'.$error.'</div>\'); 
				</script>';
	}
	else {
		$script = '<script type="text/javascript">
				jQuery(\'input\').removeClass(\'error\');
				jQuery(\'select\').removeClass(\'error\');
				jQuery(\'.asr_forms_error\').html(\'\');
				</script>';
	}
	return $script;
}

/**
 * Wrap each result of alignement
 * @param  object    $result
 *
 * @return string    $out - @see asr_forms_wrap_result()
 */
function asr_forms_alignement_result($result_arr) {
	$out = ''; 
	foreach($result_arr as $key => $result) {
		if(isset($result->ASRAlignResult->RetrotransposonsPortionAlignResult)) {
			$list = $result->ASRAlignResult->RetrotransposonsPortionAlignResult;
			$list = is_array($list)?$list:array($list);			
			$out = asr_forms_wrap_result($list);
		}
	}
	$script = '<script type="text/javascript">
			setTimeout( function() { ASR_Forms.tableSorter(); alert("table sort"); } , 1000);
			</script>
			';
			
	return (!empty($out)? $out.$script : "<fieldset><center>No Data</center></fieldset>");
}

/**
 * Display result of alignement, use table and fieldset collapsable themes
 * @param  object    $value
 * @param  bool      $collapsed (first result false, rest true)
 *
 * @return string    $result_html - result from theme()
 */
function asr_forms_wrap_result($result) {		
	$AlignResult_table = '';
	$count = 0;
	$header = array();
	$rows = array();

	$header = array(
			array('data' => t('Repeat Name')),
			array('data' => t('Score')),
			array('data' => t('Start Offset')),
			array('data' => t('End Offset')),
			array('data' => t('Local Alignment Status')),);
	
	foreach ($result as $value) {
		//echo "<pre>";
		//print_r($value,1);
		//return;
		if(isset($value->RepeatsMatch) && isset($value->RepeatsMatch->RepeatMatch)) {
				//$out .= asr_forms_wrap_result($value->RepeatsMatch->RepeatMatch, $value->RetrotransposonsPortion);
				$RepeatMatch = $value->RepeatsMatch->RepeatMatch;
			    $RetrotransposonsPortion = $value->RetrotransposonsPortion;
			    watchdog('DEBUG - result1', print_r($RepeatMatch,1));
			    $RepeatMatch = is_array($RepeatMatch)? $RepeatMatch : array($RepeatMatch);
			    watchdog('DEBUG - result2', print_r($RepeatMatch,1));
			    foreach($RepeatMatch as $key => $value) {
			    	$item_id = "collapsible".$RetrotransposonsPortion->Name.$count;
			    	$rows [] = array(
			    			array('data' => '<span onclick="ASR_Forms.toggleCollapse(\''.$item_id.'\', \''.$value->LocalAlignmentResult->ASRSequence.'\', \''.$value->LocalAlignmentResult->GenSubSequence.'\');">'.$RetrotransposonsPortion->Name.'</span>',
			    					'class' => 'collapsible collapsed',
			    					'id' => $item_id,
			    					'alt' => $RetrotransposonsPortion->Repeat),
			    			array('data' => $value->LocalAlignmentResult->Score),
			    			array('data' => $value->StartOffset),
			    			array('data' => $value->EndOffset),
			    			array('data' => $value->LocalAlignmentStatus),
			    	);
			    	$count++;
			    }
		}
	
	}
	
	$AlignResult_table = theme('table', array('header' => $header, 'rows' => $rows, 'class' => 'sticky-table'));
	return $AlignResult_table;
	
	/*if(!empty($value->LoaclAlignmentResult)) {
		$header1 = array(
				array('data' => t('Loacl Alignment Result'), 'colspan' => 2)
		);
		
		$rows1 [] = array(
				array('data' => t('Gene Sequence Length')),
				array('data' => $value->LoaclAlignmentResult->GeneSequenceLength),
		);
		$rows1 [] = array(
				array('data' => t('GeneSequenceStartOffset')),
				array('data' => $value->LoaclAlignmentResult->GeneSequenceStartOffset),
		);
		
		$rows1 [] = array(
			array('data' => t('Aligned ASR Sequence')),
			array('data' => $value->LoaclAlignmentResult->AlignedASRSequence),
		);
		
		$rows1 [] = array(
				array('data' => t('Aligned Gene Sequence')),
				array('data' => $value->LoaclAlignmentResult->AlignedGeneSequence),
		);
		$LoaclAlignmentResult_table = theme('table', array('header' => $header1, 'rows' => $rows1));
		
	}
	
	$title_class = ($value->AlignWordStatus == 'AlignOk')?'txt_green':'txt_red'; 
	
	$current_fieldset = array(
			'#title' => '<span class="'.$title_class.'">'.$value->RetrotransposonsPortion->Name.'</span>',
			'#collapsible' => true,
			'#collapsed' => $collapsed,
			'#attributes'  => array( 'class' => (!$collapsed ? array('collapsible', 'collapsed'):array('collapsible')) ),
			'#children' => 'Repeat: '.$value->RetrotransposonsPortion->Repeat,
			'#value' => $ExactMatchAlignResult_table. $LoaclAlignmentResult_table);
	return theme('fieldset', array('element' => $current_fieldset));
	*/
}

/**
 * Build array for from selects treshold/slice legth ext...
 * @param  int    $min
 * @param  int    $max
 * @param  int    $interval
 *
 * @return array    $select_arr
 */
function build_select_arr($min, $max, $interval) {
	$curr = $min;
	$select_arr = Array();
	if($min < $max) {
		while($curr <= $max) {
			$select_arr[$curr] = $curr;
			$curr = $curr + $interval;
		}
	}
	return $select_arr;
}
/**
 * function ganarating new unique id
 * @return string $uuid unique id
 */
function generate_uuid() {
	// The field names refer to RFC 4122 section 4.1.2.
	$uuid = sprintf('%04x%04x-%04x-4%03x-%04x-%04x%04x%04x', mt_rand(0, 65535), mt_rand(0, 65535),   // 32 bits for "time_low"
			mt_rand(0, 65535),   // 16 bits for "time_mid"
			mt_rand(0, 4095),   // 12 bits before the 0100 of (version) 4 for "time_hi_and_version"
			bindec(substr_replace(sprintf('%016b', mt_rand(0, 65535)), '01', 6, 2)),   // 8 bits, the last two of which (positions 6 and 7) are 01, for "clk_seq_hi_res"
			// (hence, the 2nd hex digit after the 3rd hyphen can only be 1, 5, 9 or d)
			// 8 bits for "clk_seq_low"
			mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535)); // 48 bits for "node"


	return $uuid;
}